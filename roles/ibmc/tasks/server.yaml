---
# (c) Copyright IBM Corporation
# All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may
# not use this file except in compliance with the License. You may obtain
# a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.

- name: "Retrieve image information of {{ neerali_server_config.image }}"
  when:
    - neerali_server_action | default('') == 'create'
  neerali.general.get_ibmvpc_images:    
    access_key: "{{ neerali_ibmc_auth.access_key }}"
    service_url: "{{ neerali_ibmc_auth.service_url }}"
    name: "{{ neerali_server_config.image }}"
  register: _neerali_image_info

- name: "Extract OS info from image name of server {{ neerali_server_config.name }}"
  when:
    - neerali_server_action | default('') == 'create'
    - _neerali_image_info is defined
  ansible.builtin.set_fact:
    _neerali_ibmc_os_data: >-
      {{
        {
          'type': _neerali_image_info.images.operating_system.family.split() | map('regex_replace', '^(.).*', '\1')| join('') | lower,
          'version': _neerali_image_info.images.operating_system.version | regex_search('([0-9]+\.[a-zA-Z0-9])')
        }
      }}

- name: "Extract cloud-init yaml for server {{ neerali_server_config.name }}"
  when:
    - neerali_server_action | default('') == 'create'
  ansible.builtin.set_fact:
    _neerali_ibmc_cloud_init: "{{ neerali_server_config.cloud_init | from_yaml }}"

- name: Set default server count as 1 if count is not defined
  when:
    - neerali_server_action | default('') == 'create'
  ansible.builtin.set_fact:
    _neerali_ibmc_server_count: "{{ neerali_server_config.count | default(1) }}"

- name: Generate dynamic prefix name for server
  when:
    - neerali_server_action | default('') == 'create'
  ansible.builtin.set_fact:
    _neerali_ibmc_server_prefix: "{{ range(1000,9999) | random }}"

- name: Reset instance names list for each server
  when:
    - neerali_server_action | default('') == 'create'
  ansible.builtin.set_fact:
    _neerali_ibmc_server_names: []

- name: "Create instance names for server {{ neerali_server_config.name }}"
  when:
    - neerali_server_action | default('') == 'create'
  ansible.builtin.set_fact:
    _neerali_ibmc_server_names: >-
      {{
        _neerali_ibmc_server_names +
        [
          (
            '%s-%s-%s-%02d'|format(
              neerali_server_config.cluster,
              _neerali_ibmc_server_prefix,
              neerali_server_config.name,
              item
            )
          )
        ]
      }}
  loop: "{{ range(1, _neerali_ibmc_server_count|int + 1) }}"

- name: "Create compute instances for {{ neerali_server_config.name }}"
  vars:
    _neerali_ibmc_server_prefix: "{{ range(1000,9999) | random }}"
  when:
    - neerali_server_action | default('') == 'create'
    - _neerali_ibmc_server_names is defined
  neerali.general.ibmvpc_server:
    access_key: "{{ neerali_ibmc_auth.access_key }}"
    service_url: "{{ neerali_ibmc_auth.service_url }}"
    state: present
    name: "{{ item }}"
    image: "{{ neerali_server_config.image }}"
    network: "{{ neerali_server_config.networks.0 }}"
    ssh_keys: "{{ neerali_server_config.ssh_keys | default(omit) }}"
    vpc: "{{ neerali_server_config.vpc | default(omit) }}"
    profile: "{{ neerali_server_config.flavor | default(omit) }}"
    security_group: "{{ neerali_server_config.security_group | default(omit) }}"
    zone: "{{ neerali_server_config.zone | default(omit) }}"
    dns_zone: "{{ neerali_server_config.dns_zone | default(omit) }}"
    resource_group: "{{ neerali_server_config.resource_group | default(omit) }}"
    volume_size: "{{ neerali_server_config.volumes.size }}"
    volume_count: "{{ neerali_server_config.volumes.count }}"
    user_data: "{{ neerali_server_config.cloud_init }}"
  async: "{{ neerali_ibmc_api_timeout }}"
  poll: 0
  register: _neerali_ibmc_async_servers
  loop: "{{ _neerali_ibmc_server_names }}"

- name: "Wait for all computes to be created for {{ neerali_server_config.name }}"
  when:
    - neerali_server_action | default('') == 'create'
    - _neerali_ibmc_async_servers is defined
  ansible.builtin.async_status:
    jid: "{{ item.ansible_job_id }}"
  register: _neerali_ibmc_systems
  until: _neerali_ibmc_systems.finished
  retries: "{{ (neerali_ibmc_api_timeout / 10) | int }}"
  delay: 10
  loop: "{{ _neerali_ibmc_async_servers.results }}"
  loop_control:
    label: "{{ item.ansible_job_id }}"

- name: Add systems to ibmc provisioned list
  when:
    - neerali_server_action | default('') == 'create'
    - _neerali_ibmc_systems is defined
  ansible.builtin.set_fact:
    neerali_ibmc_systems_provisioned: >-
      {{
        neerali_ibmc_systems_provisioned | default([]) +
        [
          {
            'name': item.server.name,
            'ansible_host': item.server.ip_address,
            'ansible_ssh_user': _neerali_ibmc_cloud_init.users.0.name,
            'type': neerali_server_config.type,
            'cluster': neerali_server_config.cluster,
            'os': _neerali_ibmc_os_data,
            'roles': neerali_server_config.roles,
            'volumes': item.server.volumes,
            'driver': neerali_server_config.driver
          }
        ]
      }}
  loop: "{{ _neerali_ibmc_systems.results }}"
  loop_control:
    label: "{{ item.server.name }}"

- name: Delete ibmc compute instances
  when:
    - neerali_server_action | default('') == 'delete'
  neerali.general.ibmvpc_server:
    access_key: "{{ neerali_ibmc_auth.access_key }}"
    service_url: "{{ neerali_ibmc_auth.service_url }}"
    name: "{{ item.name }}"
    state: absent
  loop: "{{ neerali_ibmc_systems_provisioned }}"
  loop_control:
    label: "{{ item.name }}"
